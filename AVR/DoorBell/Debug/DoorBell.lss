
DoorBell.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067b  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	//System init
	
	//Set configuration PIN in input PORT
	DDRB=0;
  6c:	17 ba       	out	0x17, r1	; 23
	PORTB= 1<<PIN4; //PIn4 In high
  6e:	80 e1       	ldi	r24, 0x10	; 16
  70:	88 bb       	out	0x18, r24	; 24
	
	DDRD |=(1<<PD5);//Set PWM pin to out
  72:	8d 9a       	sbi	0x11, 5	; 17
	
	//Init Timer and PWM out
	//50Hz, 1500us pulse;
	
	
	TCCR1A =0;
  74:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0;
  76:	1e bc       	out	0x2e, r1	; 46
		
	
	TCCR1A|=(1<<COM1A1)|(1<<WGM11);//Non ivert PWM Output On	
  78:	8f b5       	in	r24, 0x2f	; 47
  7a:	82 68       	ori	r24, 0x82	; 130
  7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS12);//Fast PWM-Mode
  7e:	8e b5       	in	r24, 0x2e	; 46
  80:	8c 61       	ori	r24, 0x1C	; 28
  82:	8e bd       	out	0x2e, r24	; 46
	OCR1A=47;// set  1500us
  84:	8f e2       	ldi	r24, 0x2F	; 47
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	9b bd       	out	0x2b, r25	; 43
  8a:	8a bd       	out	0x2a, r24	; 42
	ICR1 = 624;//set 50Hz 
  8c:	80 e7       	ldi	r24, 0x70	; 112
  8e:	92 e0       	ldi	r25, 0x02	; 2
  90:	97 bd       	out	0x27, r25	; 39
  92:	86 bd       	out	0x26, r24	; 38
			_delay_ms(150);
			OCR1A = 57;
			
		}
		else 
		 OCR1A =47;
  94:	2f e2       	ldi	r18, 0x2F	; 47
  96:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		if(PINB&=(1<<4))
		{
			_delay_ms(150);
			OCR1A = 37;
  98:	65 e2       	ldi	r22, 0x25	; 37
  9a:	70 e0       	ldi	r23, 0x00	; 0
			_delay_ms(150);
			OCR1A = 57;
  9c:	49 e3       	ldi	r20, 0x39	; 57
  9e:	50 e0       	ldi	r21, 0x00	; 0
	
	
    
    while (1) 
    {
		if(PINB&=(1<<4))
  a0:	86 b3       	in	r24, 0x16	; 22
  a2:	80 71       	andi	r24, 0x10	; 16
  a4:	86 bb       	out	0x16, r24	; 22
  a6:	88 23       	and	r24, r24
  a8:	b9 f0       	breq	.+46     	; 0xd8 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	99 ea       	ldi	r25, 0xA9	; 169
  ae:	e3 e0       	ldi	r30, 0x03	; 3
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e0 40       	sbci	r30, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
		{
			_delay_ms(150);
			OCR1A = 37;
  bc:	7b bd       	out	0x2b, r23	; 43
  be:	6a bd       	out	0x2a, r22	; 42
  c0:	8f e7       	ldi	r24, 0x7F	; 127
  c2:	99 ea       	ldi	r25, 0xA9	; 169
  c4:	e3 e0       	ldi	r30, 0x03	; 3
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e0 40       	sbci	r30, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
			_delay_ms(150);
			OCR1A = 57;
  d2:	5b bd       	out	0x2b, r21	; 43
  d4:	4a bd       	out	0x2a, r20	; 42
  d6:	02 c0       	rjmp	.+4      	; 0xdc <main+0x70>
			
		}
		else 
		 OCR1A =47;
  d8:	3b bd       	out	0x2b, r19	; 43
  da:	2a bd       	out	0x2a, r18	; 42
		 asm volatile("nop");
  dc:	00 00       	nop
		
    }
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0x34>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
